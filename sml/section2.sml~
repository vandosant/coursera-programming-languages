val x = {bar=(1+2, true andalso true), foo=3+4 , baz=(false,9)}
val my_wife = {id=31111, name="Dana"}
val a_pair = (3+1, 4+2)
val another_pair = {2=5, 1=6}

(* data types *)
datatype mytype = TwoInts of int * int | Str of string | Pizza
val a = Str "hi"
val b = TwoInts(1+2,3+4)
val c = Pizza
val d = Str
val e = a

(* case expressions *)
fun f x =
    case x of
	Pizza => 3
      | Str s => String.size s
      | TwoInts(i1, i2) => i1 + i2

fun e x =
    case x of
	Constant i => i
     | Negate e2 => ~ (eval e2)
     | Add(e1,e2) => (eval e1) + (eval e2)
     | Multiply(e1,e2) => (eval e1) * (eval e2)

datatype exp = Constant of int
	     | Negate of exp 
	     | Add of exp*exp 
	     | Multiply of exp*exp

fun max_constant e =
    case e of
	Constant i => i
      | Negate e2 => max_constant e2
      | Add(e1,e2) => if max_constant e1 > max_constant e2
		      then max_constant e1
		      else max_constant e2
      | Multiply(e1,e2) => if max_constant e1 > max_constant e2
			   then max_constant e1
			   else max_constant e2

val text_exp = Add (Constant 19, Negate (Constant 4))
val nineteen = max_contant text_exp
