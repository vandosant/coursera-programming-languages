fun is_older((y1 : int, m1 : int, d1 : int), (y2 : int, m2 : int, d2 : int)) =
    if y1 < y2
    then true
    else if y1 = y2 andalso  m1 < m2
    then true
    else if y1 = y2 andalso m1 = m2 andalso d1 < d2
    then true			     
    else false

fun number_in_month(ds : (int*int*int) list, m : int) =
    if null ds
    then 0
    else if (#2(hd ds)) = m
    then 1 + number_in_month(tl ds, m)
    else 0 + number_in_month(tl ds, m)

fun number_in_months(ds : (int*int*int) list, ms : int list) =
    if null ds
    then 0
    else if null ms
    then 0
    else if (#2(hd ds)) = hd ms
    then 1 + number_in_months(tl ds, tl ms)
    else 0 + number_in_months(tl ds, tl ms)

fun dates_in_month(ds : (int*int*int) list, m : int) =
    if null ds
    then []
    else if #2(hd ds) = m
    then hd ds :: dates_in_month(tl ds, m)
    else dates_in_month(tl ds, m)

fun dates_in_months(ds : (int*int*int) list, ms : int list) =
    if null ds
    then []
    else if null ms
    then []
    else if #2(hd ds) = hd ms
    then [hd ds] @ dates_in_months(tl ds, ms)
    else dates_in_months(ds, tl ms)

fun get_nth(ss : string list, n : int) =
    if n = 1
    then hd ss
    else get_nth(tl ss, n-1)

fun date_to_string(d : int*int*int) =
    let
	val months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    in
	get_nth(months, #2 d) ^ Int.toString (#3 d) ^ ", " ^ Int.toString(#1 d)
    end

fun number_before_reaching_sum(s : int, is : int list) =
    let val n = 0
    in
	if hd is < s
	then number_before_reaching_sum(s-(hd is), tl is)
	else n + 1
    end

fun what_month(d : int) =
    let
	val months = [1, 32, 51]
    in
	number_before_reaching_sum(d)
